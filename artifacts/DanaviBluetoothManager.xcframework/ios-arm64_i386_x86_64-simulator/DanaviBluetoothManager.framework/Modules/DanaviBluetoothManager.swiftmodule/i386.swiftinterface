// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DanaviBluetoothManager
import CoreBluetooth
@_exported import DanaviBluetoothManager
import Foundation
import Swift
public func setTimeout(callback: @escaping () -> Swift.Void, delayInSec: Swift.Double)
public func setInterval(selector: ObjectiveC.Selector, interval: Swift.Double, target: Any, userInfo: Any? = nil) -> Foundation.Timer
public struct EmittedEvent {
  public var mac: Swift.String
  public var action: Swift.String
  public var deviceType: Swift.String
  public var value: Any
}
public struct Temperature {
  public var temperature: Swift.Double
  public var unit: Swift.String
  public var timestamp: Swift.Int64
}
public struct OximeterMeasurement {
  public var bloodOxygen: Swift.Int
  public var heartRate: Swift.Int
  public var pi: Swift.Int
  public var timestamp: Swift.Int64
}
public struct SpirometerMeasurement {
  public var fev1: Swift.Double
  public var pef: Swift.Double
  public var timestamp: Swift.Int64
}
public let EVENT_BLUETOOTH_DANAVI: Swift.String
public let ACTION_BLUETOOTH_STATE_CHANGE: Swift.String
public let ACTION_DEVICE_DISCOVERED: Swift.String
public let ACTION_SCAN_FINISHED: Swift.String
public let ACTION_DEVICE_CONNECTED: Swift.String
public let ACTION_DEVICE_DISCONNECTED: Swift.String
public let ACTION_DEVICE_FAILED_TO_CONNECT: Swift.String
public let ACTION_DANAVI_THERMOMETER_MEASUREMENT: Swift.String
public let ACTION_DEVICE_READY_TO_TAKE_MEASUREMENT: Swift.String
public let DANAVI_EAR_THERMOMETER_NAME: Swift.String
public let DANAVI_EAR_THERMOMETER_TYPE: Swift.String
public let THERMOMETER_SERVICE_CBUUID: CoreBluetooth.CBUUID
public let THERMOMETER_CHARACTERISTIC_CBUUID: CoreBluetooth.CBUUID
public let CELCIUS_UNIT: Swift.String
public let FAHRENHEIT_UNIT: Swift.String
public let ACTION_OXIMETER_LIVE_DATA: Swift.String
public let DANAVI_OXIMETER_NAME: Swift.String
public let DANAVI_OXIMETER_TYPE: Swift.String
public let DANAVI_OXIMETER_SERVICE_CBUUID: CoreBluetooth.CBUUID
public let DANAVI_OXIMETER_CHARACTERISTIC_CBUUID: CoreBluetooth.CBUUID
public let DANAVI_OXIMETER_FILENAME: Swift.String
public let ACTION_OXIMETER_TIMER: Swift.String
public let ACTION_OXIMETER_MEASUREMENT_DONE: Swift.String
public let ACTION_SPIROMETER_MEASUREMENT: Swift.String
public let DANAVI_SPIROMETER_NAME: Swift.String
public let DANAVI_SPIROMETER_TYPE: Swift.String
public let ACTION_DANAVI_SPIROMETER_MEASUREMENT_TAKEN: Swift.String
public let DANAVI_SPIROMETER_SERVICE_CBUUID: CoreBluetooth.CBUUID
public let DANAVI_SPIROMETER_READ_CHARACTERISTIC_CBUUID: CoreBluetooth.CBUUID
public let DANAVI_SPIROMETER_WRITE_CHARACTERISTIC_CBUUID: CoreBluetooth.CBUUID
@objc @_inheritsConvenienceInitializers public class BluetoothManager : ObjectiveC.NSObject, CoreBluetooth.CBPeripheralDelegate, CoreBluetooth.CBCentralManagerDelegate {
  final public let events: DanaviBluetoothManager.EventManager
  @objc override dynamic public init()
  public func enableBluetoothLogging()
  public func disableBluetoothLogging()
  public func scanDevices(deviceType type: Swift.String, timeout: Swift.Double? = 10)
  public func stopScan()
  public func connectDevice(mac: Swift.String)
  public func disconnectDevice(mac: Swift.String)
  public func startDanaviSpirometerMeasurement()
  @objc public func _sendPrepareTransferCommand(_ timer: Foundation.Timer)
  public func startDanaviThermometerMeasurement()
  public func startDanaviOximeterMeasurement(writeToFile: Swift.Bool? = false, withTimer: Swift.Bool? = false, measurementLength: Swift.Int? = 300, thinningInterval: Swift.Int? = 20)
  @objc public func _notifyOximeterTimer()
  public func stopDanaviOximeterMeasurement()
  @objc public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  public func retrieveOximeterData() -> Swift.String
  public func deleteOximeterData() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EventManager {
  public func listenTo(eventName: Swift.String, action: @escaping (() -> ()))
  public func listenTo(eventName: Swift.String, action: @escaping ((Any?) -> ()))
  public func removeListeners(eventNameToRemoveOrNil: Swift.String?)
  public func trigger(eventName: Swift.String, information: Any? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EventListenerAction {
  @objc deinit
}
